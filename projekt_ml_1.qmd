---
title: "projekt_ml_1"
author: "Oliwia Grądzka"
format:
  html:
    self-contained: true
    embed-resources: true
    toc: true
    toc-depth: 4
    toc-location: right
    toc-title: "Spis Treści"
    number-sections: true
    number-depth: 4
    code-fold: show
    code-summary: "show the code"
    code-tools: true
    code-block-bg: true
    code-block-border-left: "black"
    code-line-numbers: false
    code-copy: true
    html-math-method: katex
    smooth-scroll: true
    anchor-sections: true
    link-external-icon: true
    link-external-newwindow: true
    theme: 
      light: cosmo
      dark: darkly
    fontsize: 1.1em
    linestretch: 1.5
execute: 
  warning: false
  echo: true
  eval: false
editor_options:
  chunk_output_type: console
---

## Pakiety

```{r}
library(tidymodels)
library(parsnip)

# Helper packages
library(readr)       # import danych
library(broom.mixed) # konwersja 
library(dotwhisker)  # wizualizacja
```

## Dane o jeżowcach

```{r}
urchins <-
  read_csv("https://tidymodels.org/start/models/urchins.csv") %>% 
  setNames(c("food_regime", "initial_volume", "width")) %>% 
  mutate(food_regime = factor(food_regime, 
                              levels = c("Initial", "Low", "High")))

urchins
```

### Sprawdzenie braków danych

```{r}
urchins |> is.na() |> as_tibble() |> summarise_all(sum)
```

### Wykres

```{r}
urchins %>%
  ggplot(aes(
    x = initial_volume,
    y = width,
    col = food_regime,
    group = food_regime
  )) +
  geom_point() +
  geom_smooth(method = lm, se = F) +
  scale_color_viridis_d(option = "C", end = .9)
```

## Dopasowanie modelu

```{r}
width ~ initial_volume * food_regime
```

```{r}
linear_reg()
```

```{r}
linear_reg() |> 
  set_engine("keras")
```
### Model regresji liniowej

```{r}
lm_mod <- 
  linear_reg() |> 
  set_engine("lm")
```

```{r}
lm_fit <-  
  lm_mod |>
  fit(width ~ initial_volume * food_regime, data = urchins)
lm_fit  
```

```{r}
lm_fit$fit |> summary()
lm_fit |> tidy(conf.int = T)
```

```{r}
lm_fit |> 
  tidy() |> 
  dwplot(vline = geom_vline(xintercept = 0, color = "grey50", linetype = 2), 
         dot_args = list(size = 2, color = "black"), 
         whisker_args = list(color = "black")) +
  theme_bw()
```

## Prognozowanie

```{r}
new_points <- expand.grid(initial_volume = seq(5,45,5), 
                          food_regime = c("Initial", "Low", "High"))
```

```{r}
# Prognoza średniej wartości
mean_pred <- predict(object = lm_fit, new_data = new_points)

# Prognoza przedizału ufności
conf_pred <- predict(object = lm_fit, new_data = new_points, type = "conf_int")

# Łączenie danych
lm_pred <- 
  new_points |> 
  bind_cols(mean_pred) |> 
  bind_cols(conf_pred)

# WYkres danych

lm_pred |>
  ggplot(aes(x = food_regime,
             y = .pred)) +
  geom_point() +
  geom_errorbar(aes(ymin = .pred_lower,
                    ymax = .pred_upper),
                width = 0.2) +
  facet_wrap(~ initial_volume) +
  theme_bw() +
  labs(y = "urchni size")
```

## Metoda Bayesa

```{r}
prior_dist <- rstanarm::student_t(df = 1)

set.seed(123)

# Ustawiamy metodę estymacji za pomocą parsnip

bayes_mod <-
  linear_reg() |>
  set_engine(engine = "stan",
             prior_intercept = prior_dist,
             prior = prior_dist)

# Estymacja modelu

bayes_fit <- 
  bayes_mod |> 
  fit(width ~ initial_volume * food_regime, data = urchins)
```

```{r}
bayes_fit$fit #za mała dokąłdność
bayes_fit |> print(digits = 4)
bayes_fit |> tidy(conf.int = T)
```

```{r}
bayes_pred <- 
new_points |> 
  bind_cols(predict(bayes_fit, new_data = new_points)) |> 
  bind_cols(predict(bayes_fit, new_data = new_points, type = "conf_int"))
```

### Wykres 

```{r}
bayes_pred |>
  ggplot(aes(x = food_regime,
             y = .pred)) +
  geom_point() +
  geom_errorbar(aes(ymin = .pred_lower,
                    ymax = .pred_upper),
                width = 0.2) +
  facet_wrap(~ initial_volume) +
  theme_bw() +
  labs(y = "urchni size")
```

```{r}
ggplot(urchins,
       aes(initial_volume, width)) +      # returns a ggplot object 
  geom_jitter() +                         # same
  geom_smooth(method = lm, se = FALSE) +  # same                    
  labs(x = "Volume", y = "Width")         # etc
```

## Ćwiczenie 1

### Pakiety

```{r}
#| eval: true
library(tidymodels)
library(dplyr)
library(GGally)
library(dotwhisker)
library(ggplot2)

```

### Przygotowanie danych

```{r}
#| eval: true
data("airquality"); 
colnames(airquality) <- tolower(colnames(airquality))

air <-
  airquality |>
  as_tibble() |>
  na.omit() |> 
  select(-day) |> 
  mutate(month = factor(month))
air
```

### Zależności między zmiennymi

```{r}
#| eval: true
glimpse(air)
summary(air)
GGally::ggpairs(air)

shapiro.test(air$ozone)
shapiro.test(air$solar.r)
shapiro.test(air$wind)
shapiro.test(air$temp)

model <- lm(ozone ~ solar.r + wind + temp + month, data = air)
summary(model)

resid_model <- resid(model)
shapiro.test(resid_model)
```

#### Wnioski

Temperatura jest najsilniej powiązania ze stężeniem ozonu. Silniejszy wiatr obniża poziom ozonu (umiarkowana korelacja). Rozkład ozonu jest prawostronnie skośny. Test Shapiro-Wilka p < 0.001.

Promieniowanie słoneczne nie ma silnych korelacji ze zmiennymi. Rozkład skośny. Test Shapiro-Wilka p < 0.01.

Prędkość wiatru ma ujemną korelację z ozonem oraz rozkład zbliżony do normalnego. Test Shapiro-Wilka p > 0.05.

Temperatura ma rozkład przypominający normalny. Test Shapiro-Wilka: p ≈ 0.095.

Tylko wrzesień wykazuje niższe średnie stężęnie ozonu w porównaniu do maja, czyli jest statystycznie istotny p < 0.05.

### Budowa modelu liniowego O3 (MNK)

```{r}
#| eval: true

lm_mod <- linear_reg() |> 
  set_engine("lm")

lm_fit <- 
  lm_mod |> 
  fit(ozone ~ solar.r + wind + temp + month, data = air)

lm_fit |> tidy(conf.int = T)

lm_fit |> 
  tidy() |> 
  dwplot(vline = geom_vline(xintercept = 0, color = "grey50", linetype = 2), 
         dot_args = list(size = 2, color = "black"), 
         whisker_args = list(color = "black")) +
  theme_bw()
```

#### Wnioski

Promieniowanie słoneczne jest właściwie na 0, więc zmienna praktycznie nie ma wpływu na wartość prognozowanego stężenia ozonu.

Prędkość wiatru ma negatywny wpływ, im większa prędkość, tym mniejsze stężenie ozonu. Jest istotny statystycznie.

Temperatura ma pozytywny wpływ, im jest większa, tym większe jest stężenie ozonu. Jest istotna statystycznie.

Miesiące czerwiec, lipiec, sierpień mają współczynniki ujemne w porównaniu z majem oraz przedziały przecinają 0, co oznacza, że nie są istotne statystycznie.

Wrzesień ma ujemny wpływ, czyli stężenie ozonu było w nim niższe niż w maju. Jest istotny statystycznie.

### Predykcja dla nowych danych

```{r}
#| eval: true
new_air <- data.frame(
  solar.r = c(150, 200, 250),
  wind = c(8, 10, 12),
  temp = c(70, 75, 80),
  month = factor(c(5, 6, 7)))
  
mean_pred <- predict(lm_fit, new_data = new_air)
conf_pred <- predict(lm_fit, new_data = new_air, type = "conf_int")

lm_pred <- 
  new_air |> 
  bind_cols(mean_pred) |> 
  bind_cols(conf_pred)

lm_pred |> 
  ggplot(aes(x = month, y = .pred)) +
  geom_col(fill = "steelblue") +
  geom_errorbar(aes(ymin = .pred_lower, ymax = .pred_upper), width = 0.2) +
  labs(
    title = "Prognozowane stężenie O3 z przedziałami ufności",
    x = "Miesiąc",
    y = "Prognozowane O3"
  ) +
  theme_minimal()
```

#### Wnioski

Lipiec ma najwyższe prognozowane stężenie ozonu z powodu wysokiej temperatury. Czerwiec osiągnął najsłabszy wynik, mimo umiarkowanej pogody, a maj ma wynik pośredni. Przedziały ufności są szerokie, model nie jest precyzyjny.

Model nie spełnia w pełni założenia normalności, wyniki trzeba interpretować ostrożnie. Mimo to, model oddaje główne zależności między zmiennymi.
