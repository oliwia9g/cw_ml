---
title: "projekt_ml_1"
author: "Oliwia Grądzka"
format:
  html:
    self-contained: true
    embed-resources: true
    toc: true
    toc-depth: 4
    toc-location: right
    toc-title: "Spis Treści"
    number-sections: true
    number-depth: 4
    code-fold: show
    code-summary: "show the code"
    code-tools: true
    code-block-bg: true
    code-block-border-left: "black"
    code-line-numbers: false
    code-copy: true
    html-math-method: katex
    smooth-scroll: true
    anchor-sections: true
    link-external-icon: true
    link-external-newwindow: true
    theme: 
      light: cosmo
      dark: darkly
    fontsize: 1.1em
    linestretch: 1.5
execute: 
  warning: false
  echo: true
  eval: false
editor_options:
  chunk_output_type: console
---

## Pakiety

```{r}
library(tidymodels)
library(parsnip)

# Helper packages
library(readr)       # import danych
library(broom.mixed) # konwersja 
library(dotwhisker)  # wizualizacja
```

## Dane o jeżowcach

```{r}
urchins <-
  read_csv("https://tidymodels.org/start/models/urchins.csv") %>% 
  setNames(c("food_regime", "initial_volume", "width")) %>% 
  mutate(food_regime = factor(food_regime, 
                              levels = c("Initial", "Low", "High")))

urchins
```

### Sprawdzenie braków danych

```{r}
urchins |> is.na() |> as_tibble() |> summarise_all(sum)
```

### Wykres

```{r}
urchins %>%
  ggplot(aes(
    x = initial_volume,
    y = width,
    col = food_regime,
    group = food_regime
  )) +
  geom_point() +
  geom_smooth(method = lm, se = F) +
  scale_color_viridis_d(option = "C", end = .9)
```

## Dopasowanie modelu

```{r}
width ~ initial_volume * food_regime
```

```{r}
linear_reg()
```

```{r}
linear_reg() |> 
  set_engine("keras")
```
### Model regresji liniowej

```{r}
lm_mod <- 
  linear_reg() |> 
  set_engine("lm")
```

```{r}
lm_fit <-  
  lm_mod |>
  fit(width ~ initial_volume * food_regime, data = urchins)
lm_fit  
```

```{r}
lm_fit$fit |> summary()
lm_fit |> tidy(conf.int = T)
```

```{r}
lm_fit |> 
  tidy() |> 
  dwplot(vline = geom_vline(xintercept = 0, color = "grey50", linetype = 2), 
         dot_args = list(size = 2, color = "black"), 
         whisker_args = list(color = "black")) +
  theme_bw()
```

## Prognozowanie

```{r}
new_points <- expand.grid(initial_volume = seq(5,45,5), 
                          food_regime = c("Initial", "Low", "High"))
```

```{r}
# Prognoza średniej wartości
mean_pred <- predict(object = lm_fit, new_data = new_points)

# Prognoza przedizału ufności
conf_pred <- predict(object = lm_fit, new_data = new_points, type = "conf_int")

# Łączenie danych
lm_pred <- 
  new_points |> 
  bind_cols(mean_pred) |> 
  bind_cols(conf_pred)

# WYkres danych

lm_pred |>
  ggplot(aes(x = food_regime,
             y = .pred)) +
  geom_point() +
  geom_errorbar(aes(ymin = .pred_lower,
                    ymax = .pred_upper),
                width = 0.2) +
  facet_wrap(~ initial_volume) +
  theme_bw() +
  labs(y = "urchni size")
```

## Metoda Bayesa

```{r}
prior_dist <- rstanarm::student_t(df = 1)

set.seed(123)

# Ustawiamy metodę estymacji za pomocą parsnip

bayes_mod <-
  linear_reg() |>
  set_engine(engine = "stan",
             prior_intercept = prior_dist,
             prior = prior_dist)

# Estymacja modelu

bayes_fit <- 
  bayes_mod |> 
  fit(width ~ initial_volume * food_regime, data = urchins)
```

```{r}
bayes_fit$fit #za mała dokąłdność
bayes_fit |> print(digits = 4)
bayes_fit |> tidy(conf.int = T)
```

```{r}
bayes_pred <- 
new_points |> 
  bind_cols(predict(bayes_fit, new_data = new_points)) |> 
  bind_cols(predict(bayes_fit, new_data = new_points, type = "conf_int"))
```

### Wykres 

```{r}
bayes_pred |>
  ggplot(aes(x = food_regime,
             y = .pred)) +
  geom_point() +
  geom_errorbar(aes(ymin = .pred_lower,
                    ymax = .pred_upper),
                width = 0.2) +
  facet_wrap(~ initial_volume) +
  theme_bw() +
  labs(y = "urchni size")
```

```{r}
ggplot(urchins,
       aes(initial_volume, width)) +      # returns a ggplot object 
  geom_jitter() +                         # same
  geom_smooth(method = lm, se = FALSE) +  # same                    
  labs(x = "Volume", y = "Width")         # etc
```

## Ćwiczenie 1

### Pakiety

```{r}
#| eval: true
library(tidyverse)
library(dplyr)
library(GGally)

```

### Przygotowanie danych

```{r}
#| eval: true
data("airquality"); 
colnames(airquality) <- tolower(colnames(airquality))

air <-
  airquality |>
  as_tibble() |>
  na.omit() |> 
  select(-day) |> 
  mutate(month = factor(month))
air
```

### Zależności między zmiennymi

```{r}
#| eval: true
glimpse(air)
summary(air)
GGally::ggpairs(air)
```

#### Wnioski
Ozone:

* Wykazuje silną dodatnią korelację z temp

* Wykazuje umiarkowaną ujemną korelację z wind 

* Rozkład jest prawostronnie skośny

Solar.R:

* Słabsze korelacje z innymi zmiennymi

* Rozkład zbliżony do normalnego

Wind:

* Ujemna korelacja z temp i ozone

* Rozkład zbliżony do normalnego

Temp:

* Silna dodatnia korelacja z ozone
* Ujemna korelacja z wind
* Rozkład zbliżony do normalnego

Month (kategoryczna):

* Widać wyraźne różnice w rozkładach innych zmiennych między miesiącami, np. średnie ozone rośnie od maja do sierpnia

### Budowa modelu liniowego O3 (MNK)

```{r}
#| eval: true
model <- lm(ozone ~ solar.r + wind + temp + month, data = air)
summary(model)

par(mfrow = c(2, 2))
plot(model)
```

#### Ogólna charakterystyka modelu

Zmienna zależna: `ozone`

Zmienne objaśniające: `solar.r`, `wind`, `temp`, `month`

Liczba obserwacji: 111 (103 stopnie swobody po usunięciu braków danych)

Jakość dopasowania:

* R² = 0.6369 – model wyjaśnia ~63.7% zmienności stężenia ozonu.

* Skorygowane R² = 0.6122 – uwzględnia liczbę zmiennych.

* Residual standard error = 20.72 – średni błąd predykcji wynosi ~20.72 ppb (części na miliard).

#### Wnioski z współczynników

Czynniki istotne statystycznie (p < 0.05):

* `temp` (β = 1.875, p < 0.001) – każdy wzrost temperatury o 1°F zwiększa ozone o ~1.88 ppb.

* `wind` (β = -3.109, p < 0.001) – każdy wzrost prędkości wiatru o 1 mph zmniejsza ozone o ~3.11 ppb.

* `solar.r` (β = 0.052, p = 0.03) – słabszy wpływ, ale istotny.

* `month9` (wrzesień vs. maj) – istotnie niższe stężenie (β = -15.97, p = 0.018).

Miesiące nieistotne:

czerwiec (month6), lipiec (month7), sierpień (month8) – ich wpływ nie jest statystycznie istotny w porównaniu z majem.

#### Diagnostyka reszt

Rozkład reszt:

* Min: -40.34, Max: 92.69 – asymetria (możliwe odstające wartości wysokiego ozonu).

* Mediana: -3.165 – blisko zera, ale rozkład prawdopodobnie prawostronnie skośny.

#### Ogólna ocena modelu

* Wysoka istotność temp i wind (potwierdza teorię, że ozon rośnie z temperaturą, a maleje z wiatrem).

* Model istotny statystycznie (F-statistic = 25.81, p < 0.001).

* Nieliniowość reszt (możliwa potrzeba transformacji ozone, np. logarytmicznej).

* Słabsze dopasowanie dla miesięcy (tylko wrzesień istotny).

### Predykcja dla nowych danych

```{r}
#| eval: true
new_air <- data.frame(
  solar.r = c(150, 200, 250),
  wind = c(8, 10, 12),
  temp = c(70, 75, 80),
  month = factor(c(5, 6, 7)))
  
predictions <- predict(model, newdata = new_air, interval = 'confidence')
predictions
```

### Porównanie 

```{r}
#| eval: true
barplot(predictions[,"fit"], 
        names.arg = c("Maj", "Czerwiec", "Lipiec"),
        ylab = "Prognozowane O3 (ppb)",
        main = "Prognoza stężenia ozonu",
        ylim = c(0,60))
arrows(x0 = 1:3, y0 = predictions[,"lwr"],
       x1 = 1:3, y1 = predictions[,"upr"],
       angle = 90, code = 3, length = 0.1)
```

#### Pierwsza obserwacja (month=5)

* Promieniowanie (solar.r): 150

* Wiatr (wind): 8 mph

* Temperatura (temp): 70°F

Prognoza:

* Średnie O3: 39.99 ppb

* Przedział 95% ufności: [30.40, 49.58] ppb

Wnioski:

Typowe stężenie dla umiarkowanych warunków, szeroki przedział ufności (±~9.6 ppb) wskazuje na znaczną niepewność.

#### Druga obserwacja (month=6)

* solar.r: 200 (+50 vs obs. 1)

* wind: 10 mph (+2)

* temp: 75°F (+5)

Prognoza:

* Średnie O3: 31.00 ppb (niższe niż maj!)

* Przedział: [16.59, 45.40] ppb

Wnioski:

Mimo wzrostu temp i solar.r, O3 spada. Wynika to z silnego negatywnego efektu czerwca w modelu (coef: -14.76) Dodatkowo ekstremalnie szeroki przedział ufności (±~14.4 ppb) - model ma problem z tą kombinacją.

c) Trzecia obserwacja (month=7)

* solar.r: 250 (+100 vs obs. 1)

* wind: 12 mph (+4)

* temp: 80°F (+10)

Prognoza:

* Średnie O3: 42.78 ppb (najwyższe)

* Przedział: [33.44, 52.11] ppb

Wnioski:

Silny wzrost temperatury przeważył efekt wiatru. Lipiec ma mniejszy negatywny efekt niż czerwiec (coef: -8.75 vs -14.76).

#### Podsumowanie predykcji
Niespójność sezonowa:

* Maj: 39.99 ppb

* Czerwiec: 31.00 ppb (spadek)

* Lipiec: 42.78 ppb (wzrost)

Wskazuje na potencjalny problem z modelem

Wpływ zmiennych:

* Temp: silny pozytywny efekt (coef: ~1.88)

* Wiatr: negatywny efekt (coef: ~-3.11)

* Solar.r: słaby pozytywny (coef: ~0.05)

Jakość predykcji:

* Najlepsza dla lipca (węższy przedział)

* Najgorsza dla czerwca (bardzo szeroki przedział)


## Ćwiczenie 2

### Wprowadzenie z konspektu
```{r}
#| eval: true
library(tidymodels) 
library(skimr) 
library(GGally) 
library(openair) 
library(ggpubr)
tidymodels_prefer()
```

```{r}
#| eval: true
air <- mydata |> selectByDate(year = 2002) 
air |> skim() 
air <- air |> na.omit()

set.seed(222)
air[sample(1:nrow(air), size = 300, replace = F),] |> 
  select(nox, no2) |> 
  ggpairs()

# wykres regresji liniowej, do sprawdzenia danych 
set.seed(222)
air[sample(1:nrow(air), size = 300, replace = F),] |> 
  select(nox, no2) |> 
  ggplot(aes(nox, no2)) +
  geom_point() +
  geom_smooth(method = "lm", se = T, formula = y ~ x) + 
  stat_cor(label.x = 10, label.y = 80) + 
  stat_regline_equation(label.x = 10, label.y = 82) +
  theme_bw()

air |>    
  ggplot(aes(date, o3)) +     
  geom_line() +     
  theme_bw()

air |> 
  pull(o3) |> 
  range()  

air <-
  air |>
  mutate(ozone = cut(
    o3,
    breaks = c(-0.1, 10, 53),
    labels = c("Niskie", "Wysokie")
  ))

air |> count(ozone)
```

### Model regresji logistycznej

do zrobienia 

